To enable **TLS 1.2** on IIS (Internet Information Services) and disable older, insecure protocols like TLS 1.0 and TLS 1.1, you typically need to modify the Windows Server registry and ensure that the necessary updates are installed. 

Here's a step-by-step guide:

### 1. Check for Windows Updates
First, make sure your Windows Server has the necessary updates installed to support TLS 1.2.

- **Windows Server 2012 R2 and later**: TLS 1.2 is supported by default but may need to be enabled.
- **Windows Server 2008 R2 and earlier**: You may need to apply additional updates to support TLS 1.2.

You can download the required update packages for older Windows Server versions from Microsoft's update catalog. 
For instance, for **Windows Server 2008 R2**, you'll need [KB3140245](https://support.microsoft.com/en-us/help/3140245).

### 2. Modify the Registry to Enable TLS 1.2

#### a. Open the Windows Registry Editor:
1. Press `Windows + R`, type `regedit`, and press `Enter` to open the **Registry Editor**.

#### b. Navigate to the following key:
```
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols
```

#### c. Create keys for TLS 1.2 if they don’t already exist:
1. Under `Protocols`, right-click and select **New > Key**. Name the new key **TLS 1.2**.
2. Inside the `TLS 1.2` key, create two subkeys:
   - **Client**
   - **Server**

#### d. Enable TLS 1.2 for both the Client and Server:
1. Navigate to the `Client` key under `TLS 1.2`.
2. Right-click on the right-hand side, select **New > DWORD (32-bit) Value**, and name it `DisabledByDefault`.
   - Set its value to `0` (zero).
3. Right-click again, create another `DWORD (32-bit) Value`, and name it `Enabled`.
   - Set its value to `1`.

Repeat the same steps in the `Server` key.

It should look like this:

- `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client`
  - `DisabledByDefault` = `0`
  - `Enabled` = `1`

- `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server`
  - `DisabledByDefault` = `0`
  - `Enabled` = `1`

### 3. Disable Older Protocols (Optional but Recommended)
To improve security, it is advisable to disable older protocols like TLS 1.0 and TLS 1.1.

#### a. Navigate to the following path in the Registry Editor:
```
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols
```

#### b. Create keys for the older protocols if they don’t already exist:
1. Create `TLS 1.0` and `TLS 1.1` keys under the `Protocols` key.
2. Inside each key, create subkeys named `Client` and `Server`.

#### c. Disable the older protocols:
1. Navigate to the `Client` key under `TLS 1.0` (or `TLS 1.1`).
2. Create a new `DWORD (32-bit) Value` named `Enabled`, and set it to `0`.
3. Create another `DWORD (32-bit) Value` named `DisabledByDefault`, and set it to `1`.

Repeat this for the `Server` key.

It should look like this:

- `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Client`
  - `Enabled` = `0`
  - `DisabledByDefault` = `1`

- `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.0\Server`
  - `Enabled` = `0`
  - `DisabledByDefault` = `1`

Repeat the same for `TLS 1.1`.

### 4. Reboot the Server
After making these changes, reboot your server for the settings to take effect. You can restart IIS directly, but a full reboot ensures that the registry settings are applied properly.

```cmd
iisreset
```

### 5. Verify TLS 1.2 is Active
To verify that TLS 1.2 is active, you can use various tools like **SSL Labs** ([ssllabs.com/ssltest](https://www.ssllabs.com/ssltest/)) to check the server’s SSL/TLS configuration. Alternatively, you can use PowerShell to verify the supported protocols.

To test via **PowerShell**:

1. Open **PowerShell** and run the following command to check what SSL/TLS versions are enabled:
   ```powershell
   [Net.ServicePointManager]::SecurityProtocol
   ```

2. To force the use of TLS 1.2 for outgoing connections:
   ```powershell
   [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
   ```

### 6. Update .NET Framework to Support TLS 1.2 (if needed)
If your applications are built on older versions of the .NET Framework, they may default to TLS 1.0. To ensure your .NET applications use TLS 1.2, you need to update the .NET Framework settings.

- Modify your application to use TLS 1.2 by setting the `SecurityProtocol` in code, like so:
  ```csharp
  System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
  ```

- Ensure that the .NET Framework on your server is updated to a version that supports TLS 1.2 (for example, .NET 4.6 or later).

### Conclusion
By following the steps above, you will have enabled TLS 1.2 on IIS, enhancing the security of your server communications. Disabling older protocols such as TLS 1.0 and 1.1 is highly recommended for security purposes.
